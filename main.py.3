from fastapi import FastAPI, Query
from pydantic import BaseModel
from datetime import datetime, time, timedelta, date
import os
from dotenv import load_dotenv
from pinecone import Pinecone
from openai import OpenAI
import json
from utils.db import get_db_connection
from fastapi.middleware.cors import CORSMiddleware
from gpt_utils import completar_campos_con_openai, deducir_ubicacion_textual_desde_coordenadas completar_campos_con_openai, deducir_ubicacion_textual_desde_coordenadas
from mapa import router as mapa_router
from geo_localizacion_ai import geocodificar_coordenadas, enriquecer_metadata_con_openai
from deducir_filtros_con_gpt import analizar_intencion_con_gpt
import re

load_dotenv()

openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
index = pc.Index(os.getenv("PINECONE_INDEX_NAME"))

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class NotaRequest(BaseModel):
    user_email: str
    texto: str
    emocion: str = None
    tags: list[str] = []
    categoria: str = None
    ubicacion_textual: str = None
    latitud: float = None
    longitud: float = None
    fecha_manual: str = None  # puede venir como "2025-07-02" o "2025-07-02T15:32"
    hora_manual: str = None   # puede venir como "15:32"


@app.post("/guardar-nota")
def guardar_nota(data: NotaRequest):
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)

    now = datetime.now()
    try:
        if data.fecha_manual:
            dt = datetime.fromisoformat(data.fecha_manual)
            fecha = dt.date()
            hora = dt.time()
        else:
            fecha = now.date()
            hora = now.time()

        if data.hora_manual:
            hora = datetime.strptime(data.hora_manual, "%H:%M").time()

    except ValueError:
        fecha = now.date()
        hora = now.time()

    # Buscar o crear usuario
    cursor.execute("SELECT id FROM usuarios WHERE email = %s", (data.user_email,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO usuarios (nombre, email) VALUES (%s, %s)", (data.user_email, data.user_email))
        db.commit()
        user_id = cursor.lastrowid
    else:
        user_id = user['id']

    ubicacion_resuelta = geocodificar_coordenadas(data.latitud, data.longitud) if data.latitud and data.longitud else data.ubicacion_textual
    enriquecido = enriquecer_metadata_con_openai(data.texto, ubicacion_resuelta)

    response = openai_client.embeddings.create(
        input=data.texto,
        model="text-embedding-3-small"
    )
    embedding = response.data[0].embedding
    pinecone_id = f"nota_{user_id}_{int(datetime.now().timestamp())}"

    metadata = {
        "user_id": str(user_id),
        "fecha": str(fecha),
        "hora": str(hora),
        "emocion": enriquecido["emocion"],
        "categoria": enriquecido["categoria"],
        "tags": enriquecido["tags"],
        "titulo": enriquecido["titulo"],
        "resumen": enriquecido["resumen"],
        "ubicacion": ubicacion_resuelta,
        "modelo_embedding": "text-embedding-3-small"
    }
    if data.latitud is not None:
        metadata["latitud"] = data.latitud
    if data.longitud is not None:
        metadata["longitud"] = data.longitud

    index.upsert([(pinecone_id, embedding, metadata)])

    cursor.execute("""
        INSERT INTO notas (
            user_id, texto, emocion, tags, categoria,
            ubicacion_textual, latitud, longitud,
            fecha, hora, pinecone_id, resumen
        ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
    """, (
        user_id, data.texto, enriquecido["emocion"], json.dumps(enriquecido["tags"]),
        enriquecido["categoria"], ubicacion_resuelta, data.latitud, data.longitud,
        fecha, hora, pinecone_id, enriquecido["resumen"]
    ))
    db.commit()
    cursor.close()
    db.close()

    return {"status": "ok", "pinecone_id": pinecone_id}


@app.get("/notas-por-email")
def notas_por_email(email: str = Query(...)):
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM usuarios WHERE email = %s", (email,))
    user = cursor.fetchone()
    if not user:
        cursor.close()
        db.close()
        return {"notas": []}
    user_id = user['id']
    cursor.execute("SELECT * FROM notas WHERE user_id = %s ORDER BY fecha DESC, hora DESC", (user_id,))
    notas = cursor.fetchall()
    #print("üìå Fechas devueltas desde MySQL:", [n['fecha'] for n in notas])

    if not notas:
        return {"resultados": [], "resumen": "No se encontraron notas que coincidan con los filtros."}

    cursor.close()
    db.close()
    return {"notas": notas}


def deducir_top_k_desde_pregunta(pregunta: str) -> int:
    pregunta_lower = pregunta.lower()
    if any(p in pregunta_lower for p in ["mes", "semana", "√∫ltimos d√≠as", "resumen", "todo", "qu√© hice", "durante este"]):
        return 30
    if any(p in pregunta_lower for p in ["hoy", "ayer", "qui√©n", "d√≥nde", "cu√°ndo", "mi amigo", "mi mam√°", "este lugar"]):
        return 5
    if len(pregunta) < 30:
        return 5
    elif len(pregunta) > 100:
        return 30
    return 15


def convertir_fecha_hora(nota, offset):
    try:
        fecha = nota['fecha']
        hora = nota['hora']
        if isinstance(hora, (int, float)):
            segundos = int(hora)
            hora = time(hour=segundos // 3600, minute=(segundos % 3600) // 60, second=segundos % 60)
        if isinstance(hora, timedelta):
            segundos = int(hora.total_seconds())
            hora = time(hour=segundos // 3600, minute=(segundos % 3600) // 60, second=segundos % 60)
        if isinstance(fecha, str):
            fecha = datetime.strptime(fecha, "%Y-%m-%d").date()
        dt = datetime.combine(fecha, hora)
        return (dt + timedelta(hours=offset)).strftime("%d/%m/%Y %H:%M")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al convertir nota ID {nota.get('id')} ‚Üí {e}")
        return "(fecha inv√°lida)"

@app.get("/buscar-notas")
def buscar_notas(email: str = Query(...), texto: str = Query(...), offset: float = Query(-3.0)):
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT id FROM usuarios WHERE email = %s", (email,))
    user = cursor.fetchone()
    if not user:
        cursor.close()
        db.close()
        return {"resultados": [], "resumen": "No se encontr√≥ el usuario."}

    user_id = user['id']
    intencion = analizar_intencion_con_gpt(texto)
    k = intencion.get("top_k", 15)
    filtros = intencion.get("filtros", {})

    # A√±adimos detecci√≥n b√°sica de fecha textual si no hay fecha deducida
    if "fecha" not in filtros:
        texto_lower = texto.lower()
        hoy = date.today()
        if "ayer" in texto_lower:
            filtros["fecha"] = str(hoy - timedelta(days=1))
        elif "hoy" in texto_lower:
            filtros["fecha"] = str(hoy)
        elif m := re.search(r"(\d{1,2}) de julio", texto_lower):
            dia = int(m.group(1))
            filtros["fecha"] = f"2025-07-{dia:02d}"

    query = "SELECT * FROM notas WHERE user_id = %s"
    params = [user_id]

    if "fecha" in filtros:
        query += " AND fecha = %s"
        params.append(filtros["fecha"])
    if "emocion" in filtros:
        query += " AND emocion = %s"
        params.append(filtros["emocion"])
    if "tags" in filtros and filtros["tags"]:
        for tag in filtros["tags"]:
            query += " AND tags LIKE %s"
            params.append(f"%{tag}%")

    query += " ORDER BY fecha DESC, hora DESC LIMIT 100"
    cursor.execute(query, tuple(params))
    notas = cursor.fetchall()

    print("üìå Fechas devueltas desde MySQL:", [n['fecha'] for n in notas])

    if not notas:
        return {"resultados": [], "resumen": "No se encontraron notas que coincidan con los filtros."}

    response = openai_client.embeddings.create(
        input=texto,
        model="text-embedding-3-small"
    )
    embedding = response.data[0].embedding

    resultados = []
    for nota in notas:
        nota_vector = index.fetch([nota['pinecone_id']]).vectors.get(nota['pinecone_id'])
        if nota_vector:
            similarity = sum(e * n for e, n in zip(embedding, nota_vector['values']))
            nota["score"] = similarity
            resultados.append(nota)

    resultados.sort(key=lambda x: x["score"], reverse=True)
    top_resultados = resultados[:k]

    texto_notas = "\n\n".join([
        f"- {convertir_fecha_hora(n, offset)}"
        + (f" [{n['emocion']}]" if n.get('emocion') else "")
        + f": {n['texto']}"
        for n in top_resultados
    ])

    fecha_actual = (datetime.utcnow() + timedelta(hours=offset)).strftime("%Y-%m-%d")

    prompt = f"""
Fecha actual: {fecha_actual}. Si la pregunta hace referencia a un d√≠a (como "hoy", "ayer", "anteayer"), tom√° esta fecha como referencia.

Ten√©s la siguiente lista de notas tomadas por un usuario. Cada nota tiene fecha, hora, texto, emoci√≥n, etc.

Notas:

{texto_notas}

Pregunta: {texto}

Respond√© en un tono conversacional, como si fueras un asistente personal que conoce bien a quien escribe estas notas.

Si la pregunta incluye m√∫ltiples temas, pod√©s agrupar por emoci√≥n, tags o d√≠a. Si menciona "m√°s usados" o "resumen", inclu√≠ estad√≠sticas tambi√©n.
"""

    chat_response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Sos un asistente reflexivo y emp√°tico que ayuda a interpretar notas personales."},
            {"role": "user", "content": prompt}
        ]
    )
    resumen = chat_response.choices[0].message.content.strip()

    ahora = datetime.now()
    cursor.execute("""
        INSERT INTO consultas (user_id, pregunta, respuesta, fecha, hora)        VALUES (%s, %s, %s, %s, %s)
    """, (
        user_id,
        texto,
        resumen,
        ahora.date(),
        ahora.time()
    ))
    db.commit()

    cursor.close()
    db.close()

    return {"resultados": top_resultados, "resumen": resumen}


app.include_router(mapa_router)
